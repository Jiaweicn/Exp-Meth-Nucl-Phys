//定义所需的变量
ifstream in;
string ss;//定义字符变量
double a, b, e, dedx;//读入文件时所需要的变量
double dx=0.0001,x,xmax,dE,E,E_f,E_i=320,dEdx;//E_f是射程为127mm时的入射能量，循环迭代确定最终值
int len=100;//只读取程序所需的文件的前len行数据
auto *g=new TGraph;//定义三个新的二维散点图(TGraph)
const int N=10000;//定义常量N
double s,Emax=300;//s为某一入射能量粒子的射程，Emax为随机产生的粒子能量的上限
auto *Ex=new TGraph;//定义新画布，由于载入 E-x 数据点
auto *xE=new TGraph;//定义新画布，由于载入 x-E 数据点
double He_iso[]={4,6,8};//三个He同位素的质量数
double E_He;
int len_iso=sizeof(He_iso)/sizeof(He_iso[0]);
double_t d1[3*N],d2[3*N],d3[3*N];
//%jsroot on
TCanvas *c=new TCanvas;
string nuc[]={"H_1.txt","He_3.txt","Li_6.txt","Be_7.txt","B_8.txt","C_10.txt","N_12.txt","O_14.txt"};//所有欲求同位素的文件名
int l_nuc,isoA;
l_nuc=sizeof(nuc)/sizeof(nuc[0]);
int m,n,i,j,k;
double isoH[]={1,2,3};
double isoHe[]={3,4,6,8};
double isoLi[]={6,7,8,9};
double isoBe[]={7,9,10,11};
double isoB[]={8,10,11,12,13};
double isoC[]={10,11,12,13,14,15};
double isoN[]={12,13,14,15,16,17};
double isoO[]={14,15,16,17,18,19,20};//39个核素的质量数，按原子序数分数组记录
double iso[]={0,0,0,0,0,0,0};
double_t d1e[39*N],d2e[39*N],d3e[39*N];//记录所有同位素在三层Si中能量沉积数据的数组

//将数组nuc中所有核素的选定同位素在探测器中的能量损失全部求出
n=0;
for(m=0;m<l_nuc;m++)
{
    if(nuc[m]=="H_1.txt")
    {
        isoA=sizeof(isoH)/sizeof(isoH[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoH[i];
        }
    }
    if(nuc[m]=="He_3.txt")
    {
        isoA=sizeof(isoHe)/sizeof(isoHe[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoHe[i];
        }
    }
    if(nuc[m]=="Li_6.txt")
    {
        isoA=sizeof(isoLi)/sizeof(isoLi[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoLi[i];
        }
    }
    if(nuc[m]=="Be_7.txt")
    {
        isoA=sizeof(isoBe)/sizeof(isoBe[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoBe[i];
        }
    }
    if(nuc[m]=="B_8.txt")
    {
        isoA=sizeof(isoB)/sizeof(isoB[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoB[i];
        }
    }
    if(nuc[m]=="C_10.txt")
    {
        isoA=sizeof(isoC)/sizeof(isoC[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoC[i];
        }
    }
    if(nuc[m]=="N_12.txt")
    {
        isoA=sizeof(isoN)/sizeof(isoN[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoN[i];
        }
    }
    if(nuc[m]=="O_14.txt")
    {
        isoA=sizeof(isoO)/sizeof(isoO[0]);
        for(i=0;i<isoA;i++)
        {
            iso[i]=isoO[i];
        }
    }
    delete g;
    g=new TGraph;//重新定义散点图g
    for(j=0;j<isoA;j++)
    {
        in.open(nuc[m]);//读入LISE软件生成的3He入射到Si探测器的数据
        if(!in.is_open())//文件不存在则退出程序
        {
            cout<<"Data File does not exist!"<<endl;
            return 0;
        }
        getline(in,ss);
        i=0;
        while(!in.eof())
        {
            in >> a >> b >> e >> dedx >> a >> b >> a >> b >> a >> b >> a >> b;
            // 对照数据文件进行理解。一列一列地读入，提取第3、4列数据。
            g->SetPoint(i,e*iso[j],dedx*1000);//添加数据点到图中
            i++;
            if(i>=len)break;
        }
        in.close();//关闭读入通道
        //以下由 dE/dx-E 数据关系求He同位素入射后在材料中的 E-x 关系
        x=0;
        E=E_i;
        dEdx=g->Eval(E,0,"");//由插值函数给出初始dE/dx值
        i=0;
        while(E>0)
        {
            x=x+dx;
            dE=dEdx*dx;//4He穿过dx厚度后所损失的能量
            E=E-dE;//穿透dx厚度后，4He粒子的能量
            Ex->SetPoint(i,x,E);//添加数据点到E-x关系数据图Ex中
            xE->SetPoint(i,E,x);
            dEdx=g->Eval(E,0,"");//得到下一循环所需的dEdx插值
            i++;
        }
        xmax=x;//求得入射能量为E_i的粒子的射程，并记为xmax

//前半部分已生成某一核素的E-x数据，后半部分求N个能量不同的该入射核素在探测器中的能量沉积，记录在数组d1,d2,d3中
        Emax=35.0*iso[j];//每核子入射能量上限为35MeV，Emax为该核素的入射能量上限
        for(i=0;i<N;i++)
        {
            E_He=gRandom->Uniform(0.,Emax);//循环生成0到300MeV间能量的粒子
            E=E_He;
            x=xE->Eval(E_He,0,"");//由插值函数给出入射能量E_He对应的x坐标值
            //s=xmax-x;//随机入射能量的入射粒子从入射到停止的射程记为s
            for(k=0;k<len_det;k++)
            {
                x=x+det[k];
                if(x>xmax)
                {
                    if(k==0)//入射粒子停止在第一层探测器
                    {
                        d1e[n]=E_He;
                        d2e[n]=0;
                        d3e[n]=0;
                        n++;
                    }
                    else if(k==1)//停止在第二层探测器
                    {
                        d2e[n]=E_He-d1e[n];
                        d3e[n]=0;
                        n++;
                    }
                    else if(k==2)//停止在第三层探测器
                    {
                        d3e[n]=E_He-d1e[n]-d2e[n];
                        n++;
                    }
                    break;//无法从第k+1层探测器中出射，则能量全部沉积在第k+1层中。此时退出该粒子的任务进入下一入射粒子的循环
                }
                E_f=Ex->Eval(x,0,"");//从第k+1层出射时的剩余能量
                if(k==0)//穿过第一层探测器时沉积的能量
                {
                    d1e[n]=E-E_f;
                    E=E_f;
                }
                if(k==1)//穿过第二层探测器时沉积的能量
                {
                    d2e[n]=E-E_f;
                    E=E_f;
                }
                if(k==2)//穿过第三层探测器时沉积的能量
                {
                    d3e[n]=E-E_f;
                    n++;
                }//进入粒子在下一层探测器中能量沉积的循环
            }
        }
    delete g;
    g=new TGraph;
    delete Ex;
    delete xE;
    Ex=new TGraph;
    xE=new TGraph;
    }//此循环结束，单个入射粒子在三层探测器中的能量沉积已全部求出
}

//定义三个新的二维直方图
TH2I *h1= new TH2I("","",300,0,300, 300,0,500);
TH2I *h2= new TH2I("","",300,0,300, 300,0,350);
TH2I *h= new TH2I("","",300,0,600, 300,0,900);//此为d1e与三层中所有能量沉积de的直方图

//添加数据点到三个直方图中
for(i=0;i<39*N;i++)
{
    h1->Fill(d2e[i], d1e[i]);
    h2->Fill(d3e[i], d2e[i]);
    h->Fill(d1e[i],d1e[i]+d2e[i]+d3e[i]);
}

//绘制d1e和d2e数据的二维直方图
c->Clear(); 
h1->GetXaxis()->SetTitle("de2(MeV)");
h1->GetYaxis()->SetTitle("de1(MeV)");
h1->SetTitle("d1e vs. d2e for He in Si");
h1->Draw("colz");
c->Draw();

//绘制d2e和d3e数据的二维直方图
c->Clear(); 
h2->GetXaxis()->SetTitle("de3(MeV)");
h2->GetYaxis()->SetTitle("de2(MeV)");
h2->SetTitle("d2e vs. d3e for He in Si");
h2->Draw("colz");
c->Draw();

//绘制d2e和de数据的二维直方图
c->Clear(); 
h->GetXaxis()->SetTitle("d1e(MeV)");
h->GetYaxis()->SetTitle("de(MeV)");
h->SetTitle("de vs. d1e for He in Si");
h->Draw("colz");
c->Draw();
